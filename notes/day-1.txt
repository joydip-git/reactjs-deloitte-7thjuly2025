s/w and editors required:
--------------------------------
Node JS
VS Code


Roadmap:
--------------------
JavaScript
New Features in JS since 2015

TypeScript (optional)

Node JS (basics)

angular/react/vue etc.


React JS:
---------------------
front-end development
single page applictaion (SPA)
open source, JS based library (NOT a framework)
create an web application through a series of components
updats DOM (only what is required to be updated) using VDOM mechanism
uses declarative syntax 
maintained by Facebook
it uses JSX (JavaScript XML)
supports uni-directional data flow
uses state management (useState -> react hook)
components are re-usable and entire UI is broken into sevaral such components and nested into each other to create the while UI

2 types of components - class and functional
MVC style (or MVVM style???)


web servers:
--------------------
IIS (windows)
Apache Tomcat
Nginx
Vercel
Amzon EC2...


extension	module
----------------------------
.aspx		
.jsp		
.htm/.html	
.....
.xyz		handler for .xyz page request


<html>
	<head>
	</head>
	<body>
	
		
	<h2> Welcome to my web app</h2>
	<br>
	<butoon>....</button>
		
		
	</body>
</html>


app.html		=> <App> or <app-root>
<div>
	<Header></...>
	<Footer></...>
</div>

welcome.html			=> <Header> or <app-header>
<h2> Welcome to my site</h2>
<div>.....

footer.html			=> <Footer> or <app-footer>
<footer>
<h4> Copyright....</42>
</footer>


a component => design/template/view (html) + code (js/ts) + styles


browser => HTML parser (understands the HTML tags in the HTML file and render the design in the browser)

page is de-hydrated
	hydration
page is hydrated


html + js/ts => single file (.jsx/.tsx)
html (file) + ts (file) =>


reactjs-apps

app development server (app server)
	host the application

live server => hosts the app using a port and loads the content of the web app in the browser

lite-server
webpack-dev-server etc.

chrome: V8 (C++)
safari: JS Core (indigo)
firefox: spidermonkey
edge: chromium
opera: chromium

js/ts => module
-----------------
function x(){}
var/let/const a =100

js/ts => module
---------------

ECMA => version of scripting language features
ECMAScript => guideline

2015 => ES 6
...
2025 => ES 16

module formats:

a. ES module format => export/import
b. AMD (asynchronous module format)
b. UMD (Universal module format)
d. Common JS format (Node JS)


module loader => which understands the import/export lines in js/ts files, resolves the dependencies and then loads the files (modules)

requirejs => Does understand ONLY AMD (not anything else)
if you have written JS modules using ither module format then get those modules converted to AMD format

any browser s/w (chrome) does not have any module loader s/w 
you have to supply


define('',[],function(){

	function call(){}
})

require('',[],function(){
	function call(){}
})

a.js
function call(){}
module.exports = {callFn: call}

b.js
const {call} = require('./a')
























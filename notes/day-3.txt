code
packages
tools

CLI tool:
create-react-app
vite
next js

vite:
>npm create vite@latest

maintaining the state of data in a parent component (lifting the state up)

prop-types => 3rd party package which helps to define properties for a react component and provides supports for validation of those properties (property checking)
>npm i prop-types

import as following:
import PropTypes from 'prop-types'

function Comp{}
Comp.propTypes={prop1: PropTypes.<data-type>.[isRequired]}


string, boolean, number, object, function

undefined, Infinity, NaN, null etc.

any, unknown, ReadOnly, Partial etc.

type myType = boolean|number|string
type myType={
	id:number,
	name:string
}

function call(a:number, b:number):myType{
	return undefined
}


function useState<T>(initData:T){
	let data = initData //{id:0, salary:0, name:''}
	function async updateData(newData:T){
		data = newData//{id:0, salary:0, name:''}
	}
	function async updateData(callback:(oldData:T)=>T){
		data = callback(data)
	}
	return [data,updateData]
}

const state = useState<{id:number,salary:number,name:string}>({id:0, salary:0, name:''})
const message = state[0]
const updateMessage = state[1]

const [message,updateMessage]= useState<string>('welcome')

updateMessage((oldData)=>{return {...oldData, id:0, salary:0}})

{name}

const numbers =[1,2,3,4]
const x = numbers[0]
const y = numbers[1]
const z = numbers[3]

const [x,y,,z] = numbers

const obj ={ id:1, name: 'anil', salary:1000}
const id = obj.id/obj['id']
const salary= obj.salary/obj['salary']

const {id:id, salary:salary} = obj
const {id, salary} = obj


export function add(){}

module.exports = {add:add}

=> { add:add }

import {add} from './'











